function examples(options){
     var settings = $.extend({
        tsphpId: 'tsphp',
        exampleId: 'example'
    }, options );   

    var examples = [
        "",
        //----------------------------------------------------------------------------
        //variables - basics
        //----------------------------------------------------------------------------
          '//Each variable needs a declaration including a type in contrast to PHP.\n'
        + '//For an overview of the built-in types, have a look at:\n'
        + '//http://tsphp.ch/wiki/display/TSPHP/Types\n'
        + '\n'
        + 'int $i; //declaration of $a with type int\n'
        + '\n'
        + '//A variable needs to be initialised before its first usage. Either in\n'
        + '//the declaration itself (as with $f below) or later on (as with $i)\n'
        + '$i = 0;\n'
        + 'float $f = $i + 1;\n'
        + '\n'
        + '//TSPHP is type-safe and hence a variable can only hold the defined\n'
        + '//type. However, you can use object which is the parent type of all\n'
        + '//types and thus can hold all types.\n'
        + '\n'
        + 'object $o = false;\n'
        + '$o = 1;\n'
        + '$o = 1.2;\n'
        + '$o = "hello world";\n'
        + '$o = [1,2];\n'
        + '$o = new Exception();\n'
        + '\n'
        + '//Yet, if you want to pass a variable of type object to a function or\n'
        + '//assign it to another variable which has defined a more specific type,\n'
        + '//then you need to apply a cast. Be aware that casts can cause runtime\n'
        + '//errors and you should avoid casts whenever possible. Hence, you\n'
        + '//should use object only in very rare cases.\n' 
        + '\n'
        + 'function void foo(int $a){} //foo expects an int\n'
        + '\n'
        + '//cast without runtime error - $o holds an Exception\n'
        + 'Exception $e = (Exception) $o;\n'
        + 'foo((int) $o); //this cast will cause a runtime error\n'
        + '\n'
        + '//You will see that the output include a runtime check for the cast\n'
        + '//which triggers an E_RECOVERABLE_ERROR if the cast cannot be applied.\n'
        + '//That is actually a bug, it should be E_USER_ERROR. Do you have time\n'
        + '//to fix it? Should not take longer than half an hour:\n'
        + '//http://tsphp.ch/jira/browse/TSPHP-716\n'
        + '\n'
        + '//Please have a look at the following page in the Language Reference\n'
        + '//Manual for more information about variables:\n'
        + '//http://tsphp.ch/wiki/display/TSPHP/Variables\n'
        ,
        //----------------------------------------------------------------------------
        //variables - wrong usage
        //----------------------------------------------------------------------------
          '//See example "Variables - basics" for an introduction. The following\n'
        + '//examples show what is not allowed in TSPHP (in contrast to PHP).\n'
        + '\n'
        + '//Double definitions - each variable (as well as functions, classes\n'
        + '//etc.) can only be declared once.\n'
        + '\n'
        + 'int $i = 0;\n'
        + 'int $i = 1;\n'
        + '\n'
        + '\n'
        + '//Forward references - each variable has to be declared before its\n'
        + '//first usage. You will see that the corresponding error message in the\n'
        + '//output is not entirely correct. Do you want to fix it? See:\n'
        + '//http://tsphp.ch/jira/browse/TSPHP-665 \n'
        + '\n'
        + '$f;\n'
        + 'float $f = 1.2;\n'
        + '\n'
        + '\n'
        + '//Unintialised variables - each variable has to be initialised before\n'
        + '//its first usage.\n'
        + '\n'
        + 'string $s; //declaration without initialisation\n'
        + '$s.= "hello"; //concatenation without prior initialisation\n'
        + 'echo $s;\n'
        + '\n'
        + '//Assigning the wrong type - TSPHP is type-safe and variables can\n'
        + '//only hold the specified type:\n'
        + 'bool $b = false;       //that is fine, assigning a bool to a bool\n'
        + '$b = 1;                //no! int to bool is not allowed\n'
        + '$b = 1.2;              //naah\n'
        + '$b = "hello";          //stop it\n'
        + '$b = [1,2];            //why would you do that\n'
        + '$b = new Exception();  //that is not allowed either\n'
        ,
        //----------------------------------------------------------------------------
        //functions
        //----------------------------------------------------------------------------
          '//Each function requires the definition of a return type and each\n'
        + '//parameter requires a type as well in contrast to PHP.\n'
        + '\n'
        + 'function void doesNotReturn(){}\n'
        + '\n'
        + '//The example above uses the special type void which means that no\n'
        + '//result will be returned from this function. Following an example\n'
        + '//with int as return type:\n'
        + '\n'
        + 'function int getNumber(bool $b){\n'
        + '    if($b){\n'
        + '        return 1;\n'
        + '    }\n'
        + '    throw new Exception("some nice error message");\n'
        + '}\n'
        + '\n'
        + '//As in PHP you can specify optional parameters by using = after\n'
        + '//the parameter name.\n'
        + '\n'
        + 'function void setLimit(int $limit=10){}\n'
        + '\n'
        + '//TSPHP distinguishes between optional parameters and allowing\n'
        + '//null for a parameter. See example "Nullable" to see what nullable\n'
        + '//is all about. Following an example of a nullable parameter\n'
        + '\n'
        + 'function void foo(Exception? $e){}\n'
        + '\n'
        + '//$e is nullable and thus can either be an Exception or null - have\n'
        + '//a look at the output to the see how this is represented in PHP.\n'
        + '//Notice that the user has to pass a value for $e in contrast to PHP\n'
        + '//where nullable automatically would mean optional as well. Following\n'
        + '//two parameter which are optional and nullable at the same time\n'
        + '\n'
        + 'function void bar(int? $i = 1, float? $b = null){}\n'
        + '\n'
        + '//$i has 1 as default value and $b null as default value. The\n'
        +'//combination of $i is simply not possible in \n'
        + '\n'
        + '//Please have a look at the following page in the Language Reference\n'
        + '//Manual for more information about functions:\n'
        + '//http://tsphp.ch/wiki/display/TSPHP/Functions\n'
        ,
        //----------------------------------------------------------------------------
        //classes
        //----------------------------------------------------------------------------
          '//Classes and interfaces are defined in a very similar way as in PHP with\n'
        + '//the addition that one needs to define types for fields (PHP calls them\n'
        + '//properties) and a return type for methods as well as a type for each\n'
        + '//parameter (as for functions - see example "Functions"). For instance:\n'
        + '\n'
        + 'class PersonDto {\n'
        + '    string $firstname;\n'
        + '    string $lastname;\n'
        + '}\n'
        + '\n'
        + 'interface IPerson {\n'
        + '    function string getName();\n'
        + '    function void setFirstname(string $firstname);\n'
        + '    function void setLastname(string $lastname);\n'
        + '}\n'
        + '\n'
        + 'class Person implements IPerson {\n'
        + '    private PersonDto $dto;\n'
        + '    \n'
        + '    public function __construct(PersonDto $dto) {\n'
        + '        $this->dto = $dto;\n'
        + '    }\n'
        + '    \n'
        + '    public function string getName() {\n'
        + '        return $this->dto->firstname." ".$this->dto->lastname;\n'
        + '    }\n'
        + '    \n'
        + '    public function void setFirstname(string $firstname) {\n'
        + '        $this->dto->firstname = $firstname;\n'
        + '    }\n'
        + '    \n'
        + '    public function void setLastname(string $lastname) {\n'
        + '        $this->dto->lastname = $lastname;\n'
        + '    }\n'
        + '}\n'
        + '\n'
        + '//This should look very familiar to PHP users. Please notice, that if one\n'
        + '//omits the access modifier for a field, then public is assumed auto-\n'
        + '//matically. This differs from PHP where an access modifier for fields\n'
        + '//is always required.\n'
        + '\n'
        + '//As in PHP you can also define abstract and final classes, implement\n'
        + '//multiple interfaces etc.\n'
        + '\n'
        + 'abstract class AFoo{}\n'
        + 'interface IFoo{}\n'
        + 'interface IAnotherFoo{}\n'
        + '\n'
        + 'class MyFoo extends AFoo implements IFoo, IAnotherFoo{} \n'
        + '\n'
        + '//Please have a look at the following page in the Language Reference\n'
        + '//Manual for more information about classes:\n'
        + '//http://tsphp.ch/wiki/display/TSPHP/Classes+and+Objects\n'
        ,
        //----------------------------------------------------------------------------
        //control structures - basics
        //----------------------------------------------------------------------------
        '//TSPHP provides the standard control structures such as if/else, while\n'
        + '//do-while, for, foreach, switch, try/catch, break, continue and return.\n'
        + '//TSPHP does not support the alternative syntax for control structures\n'
        + '//neither the goto construct (at least not yet).\n'
        + '\n'
        + '//TSPHP does not have nested scopes (as PHP) and thus one cannot\n'
        + '//redeclare a variable inside a control structure. However, variables\n'
        + '//defined in a conditional scope (a scope with a guard, e.g. if) cannot\n'
        + '//be used outside of this block. Have a look at the following page in the\n'
        + '//Language Reference Manual for more information about variable scoping:\n'
        + '//http://tsphp.ch/wiki/display/TSPHP/Variable+Scope\n'
        + '\n'
        + '//It is almost silly to write examples because they look so similar to\n'        
        + '//PHP. Nevertheless, there is a main difference, conditions have to\n' 
        + '//evaluate to bool, TSPHP does not apply type juggling automatically as\n' 
        + '//as PHP does:\n' 
        + '\n'
        + 'int $a = 1;\n' 
        + 'if((bool) $a){}\n' 
        + '\n'
        + 'object $o = new Exception();\n'
        + 'while((bool) $o){\n'
        + '    $o = null;\n' 
        + '}\n' 
        + '\n'
        + '//And variable declarations within a header of a control structure\n'
        + '//require a type definition as for regular variable declarations:\n'
        + '\n'
        + 'for(int $i = 0; $i < 10; ++$i){}\n' 
        + '\n'
        + 'foreach([1,2] as string $k => object $v){}\n'
        + '\n'
        + '//A little bit cumbersome is the definition of variables within the\n'
        + '//foreach-header at the moment. Only "string" for keys and "object"\n'
        + '//for values are valid at the moment, since typed array\'s are not yet\n'
        + '//supported by TSPHP. This will change as soon as TSPHP supports\n'
        + '//typed arrays or generics.\n'
        + '\n'
        + '//Just for completeness, an example for try-catch and switch:\n'
        + '\n'
        + 'try {\n'
        + '    throw new ErrorException("error message");\n'
        + '} catch(ErrorException $ee){\n'
        + '} catch(Exception $e){\n'
        + '}\n'
        + '\n'
        + 'function void foo(int $a){\n'
        + '    switch($a){\n'
        + '        case 1:\n'
        + '            //do something\n'
        + '            break;\n'
        + '        case 2:\n'
        + '            continue;\n'
        + '        case 4:\n'
        + '            return;\n'
        + '    }\n'
        + '}\n'
        ,
        //----------------------------------------------------------------------------
        //control structures - wrong usage
        //----------------------------------------------------------------------------
          '//See example "control strucutres - basics" for an introduction. The \n'
        + '//examples show what is not allowed in TSPHP (in contrast to PHP).\n'
        + '\n'
        + '//Variables defined in a conditional scope cannot be used in an outer\n'
        + '//scope:\n'
        + '\n'
        + 'bool $b = true;\n'
        + 'if($b) {\n'
        + '    int $a = 1;\n'
        + '}\n'
        + 'echo $a; //error $a was defined in conditional scope\n'
        + '\n'
        + '//You would need to write it as follows to achieve the same goal\n'
        + '\n'
        + 'int $c = 0;\n'
        + 'bool $d = true;\n'
        + 'if($d) {\n'
        + '    $c = 1;\n'
        + '}\n'
        + 'echo $c;\n'
        + '\n'
        + '\n'
        + '//Conditions expect an expression which evaluates to bool. TSPHP does not\n'
        + '//apply type juggling automatically as PHP does:\n'
        + '\n'
        + 'string $s = "";\n'
        + 'if($s){} //$s does not evaluate to bool\n'
        + '\n'
        + 'string? $s2 = "hello"; //nullable string $s2 - see example "Nullable"\n'
        + 'while($s2){ //$s2 does not evaluate to bool\n'
        + '    $s2 = null;\n'
        + '}\n'
        + '\n'
        + 'for(; $a /* $a is not bool, likely a bug but valid in PHP */ ;);\n'
        + '\n'
        + '\n'
        + '//the switch control structure can only be used for scalar types and their\n'
        + '//nulable equivalent. Again, TSPHP does not apply a type juggling auto-\n'
        + '//matically as PHP does:\n'
        + '\n'
        + 'Exception $e = null;\n'
        + 'switch($e){}\n'
        + '\n'
        + '//Furthermore the cases of a switch-statement need to evaluate to a sub-type\n'
        + '//or to the same type as the control-expression defined in the switch-header:\n'
        + '\n'
        + 'switch($b){\n'
        + '    case false:   //that is ok\n'
        + '    case 1:       //int and not bool\n'
        + '    case $a < 10: //that is fine\n'
        + '    case $s:      //and that is wrong again\n'
        + '}\n'
        ,
        //----------------------------------------------------------------------------
        //cast modifier
        //----------------------------------------------------------------------------
          '//TSPHP introduces two new constructs to ease the usage with types. This\n'
        + '//example shows how the cast assign operator works. Have a look at the\n'
        + '//example "cast modifier" for more details about the second construct.\n'
        + '\n'
        + '//The cast assign operator is syntactic sugar for casting the right hand\n'
        + '//side to the left hand side of the assignment. Please compile and have a\n'
        + '//look a the output to understand what it really does.\n'
        + '\n'
        + 'bool $b =() 1;\n'
        + '$b =() 1.2;\n'
        + '$b =() 1.2;\n'
        + '$b =() "1";\n'
        + '$b =() [1];\n'
        + '$b =() null;\n'
        + '$b =() new Exception();\n'
        + '\n'
        + '//You can see from the output that it adds automatically the necessary\n'
        + '//cast to bool. Yet the cast assign operator takes off even more writing\n'
        + '//in situation as the following:\n'
        + '\n'
        + 'int $i=() 1.2 + 2 * 4 / 2.3;\n'
        + '\n'
        + '//Of course, just a silly example but you can see from the output that\n'
        + '//you would need to write additional parentheses which is cumbersome and\n'
        + '//clutter the code, make it less readable.\n'
        + '\n'
        + '//Please have a look at the following page in the Language Reference\n'
        + '//Manual for more information about the cast assign operator:\n'
        + '//http://tsphp.ch/wiki/display/TSPHP/Casting+Operator\n'
        , 
        //----------------------------------------------------------------------------
        //cast modifier
        //----------------------------------------------------------------------------
          '//TSPHP introduces two new constructs to ease the usage with types. This\n'
        + '//example shows how the cast modifier works. Have a look at the example\n'
        + '//"cast assign operator" for more details about the second construct.\n'
        + '\n'
        + '//The cast modifier can be used for variables, parameters and (class)\n'
        + '//fields (PHP calls fields properties) and has the effect, that\n'
        + '//explicit castings are turned into implicit castings in the case where\n'
        + '//a value is assigned to the corresponding variable, (class) field or\n'
        + '//passed to a function with such a parameter. Following an example:\n'
        + '\n'
        + 'cast bool $b = 1;\n'
        + '$b = 1.2;\n'
        + '$b = 1.2;\n'
        + '$b = "1";\n'
        + '$b = [1];\n'
        + '$b = null;\n'
        + '$b = new Exception();\n'
        + '\n'
        + '//If you had a look at the example for "cast assign operator" then you\n'
        + '//will recognise the above code snippet. As you can see no casts are\n'
        + '//necessary any more and the compiler automatically includes the casts\n'
        + '//if necessary. The modifier should be used with care since you can\n'
        + '//lose information if a cast is applied carelessly. This actually is\n'
        + '//the case for all casts above. A further example:\n'
        + '\n'
        + 'function void foo(cast int $a){}\n'
        + 'foo("hello, I am not an int and will be casted to 0");\n'
        + '\n'
        + '//Please also notice that a cast still has to be available. The cast\n'
        + '//modifier does not turn a variable magically in a variable of type\n'
        + '//object. The following would cause a compiler exception:\n'
        + '\n'
        + '//cast Exception $e = 1; //int cannot be casted to Exception\n'
        + '\n'
        + '//Please have a look at the following page in the Language Reference\n'
        + '//Manual for more information about the cast modifier:\n'
        + '//http://tsphp.ch/wiki/display/TSPHP/cast+modifier\n'
        ,
        //----------------------------------------------------------------------------
        //nullable
        //----------------------------------------------------------------------------
          '//Nullable can be used to allow null as an additional valid value of a\n'
        + '//variable defined with a scalar type (bool, int, float, string).\n'
        + '//As in C#, a questionmark is appended to the specific scalar type:\n'
        + '\n'
        + 'int? $i = 0;\n'
        + '$i = null;\n'
        + '\n'
        + '//a nullable scalar type can almost be used the same way as the\n'
        + '//corresponding regular type with an exception. If you want to assign\n'
        + '//a nullable type to a scalar type or pass it to a function which\n'
        + '//expects a scalar type, then you need to apply a cast:\n'
        + '\n'
        + '//$i is null and will automatically be casted to 0 before incrementation\n'
        + '++$i;\n'
        + '$i = null;\n'
        + 'int $j = (int) $i; //$i is null, will be casted to 0\n'
        + 'float $f = (float) $i; //$i is null, will be casted to 0.0\n'
        + '\n'
        + '//Nullable can also be used to define that a parameter can hold null.\n'
        + '//Please have a look at the example "Functions" for more infomration.\n'
        + '\n'
        + '//Please have a look at the following page in the Language Reference\n'
        + '//Manual for more information about nullable:\n'
        + '//http://tsphp.ch/wiki/display/TSPHP/Nullable\n'
        ,
        //----------------------------------------------------------------------------
        //falseable
        //----------------------------------------------------------------------------
          '//falseable is not yet implemented but will follow soon. See\n'
        + '//http://tsphp.ch/jira/browse/TSPHP-681 for more information about the\n'
        + '//current status. \n'
        + '\n'
        + '//Falseable is very similar to nullable (see example "Nullable") with\n'
        + '//the only difference that false is the additional valid value which can\n'
        + '//be hold by such a variable. The following example would not parse and\n'
        + '//hence is commented but shall give you already an idea:\n'
        + '\n'
        + '//int! $i = \strpos("hey","hello");\n'
        + '//if($i !== false){}\n'
        + '\n'
        + '//strpos is a built-in PHP function which returns either an int or false\n'
        + '//Falseable is especially developed for this purpose. See the following\n'
        + '//two links for more information about falseable:\n'
        + '//http://tsphp.ch/wiki/display/TSPHP/scalar+type+hierarchy\n'
        + '//http://tsphp.ch/wiki/display/TSPHP/return-false-if-something-goes-wrong+approach\n'
        ,
    ];
    var functions = {
        show:
            function(nr){
                var example = examples[nr];
                if(example != undefined){
                    $('#' + settings.tsphpId).val(example);
                }
            }
    };
    
    $('#' + settings.exampleId).change(function(){
        functions.show($('#' + settings.exampleId).val());
    });
    
    return functions;
}